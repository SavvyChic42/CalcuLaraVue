{"version":3,"sources":["webpack:///./node_modules/vue/dist/vue.esm-bundler.js"],"names":["compileCache","Object","create","template","options","nodeType","innerHTML","key","cached","el","document","querySelector","code","hoistStatic","err","render","Function","_rc"],"mappings":"gfAiBA,MAAMA,EAAeC,OAAOC,OAAO,OAkDnC,SAjDA,SAA2BC,EAAUC,GACjC,KAAK,QAASD,GAAW,CACrB,IAAIA,EAASE,SAKT,OAAO,KAJPF,EAAWA,EAASG,UAO5B,MAAMC,EAAMJ,EACNK,EAASR,EAAaO,GAC5B,GAAIC,EACA,OAAOA,EAEX,GAAoB,MAAhBL,EAAS,GAAY,CACrB,MAAMM,EAAKC,SAASC,cAAcR,GAC9B,EAOJA,EAAWM,EAAKA,EAAGH,UAAY,GAEnC,MAAM,KAAEM,IAAS,QAAQT,GAAU,QAAO,CACtCU,aAAa,EACb,QAAQC,GASA,MAAMA,IAGfV,IAKGW,EAAW,IAAIC,SAAS,MAAOJ,EAAtB,CAA4B,GAE3C,OADAG,EAAOE,KAAM,EACLjB,EAAaO,GAAOQ","file":"/js/vendor.js","sourcesContent":["import * as runtimeDom from '@vue/runtime-dom';\nimport { setDevtoolsHook, initCustomFormatter, warn, registerRuntimeCompiler } from '@vue/runtime-dom';\nexport * from '@vue/runtime-dom';\nimport { getGlobalThis, isString, NOOP, extend, generateCodeFrame } from '@vue/shared';\nimport { compile } from '@vue/compiler-dom';\n\nfunction initDev() {\r\n    const target = getGlobalThis();\r\n    target.__VUE__ = true;\r\n    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);\r\n    {\r\n        initCustomFormatter();\r\n    }\r\n}\n\n// This entry is the \"full-build\" that includes both the runtime\r\n(process.env.NODE_ENV !== 'production') && initDev();\r\nconst compileCache = Object.create(null);\r\nfunction compileToFunction(template, options) {\r\n    if (!isString(template)) {\r\n        if (template.nodeType) {\r\n            template = template.innerHTML;\r\n        }\r\n        else {\r\n            (process.env.NODE_ENV !== 'production') && warn(`invalid template option: `, template);\r\n            return NOOP;\r\n        }\r\n    }\r\n    const key = template;\r\n    const cached = compileCache[key];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    if (template[0] === '#') {\r\n        const el = document.querySelector(template);\r\n        if ((process.env.NODE_ENV !== 'production') && !el) {\r\n            warn(`Template element not found or is empty: ${template}`);\r\n        }\r\n        // __UNSAFE__\r\n        // Reason: potential execution of JS expressions in in-DOM template.\r\n        // The user must make sure the in-DOM template is trusted. If it's rendered\r\n        // by the server, the template should not contain any user data.\r\n        template = el ? el.innerHTML : ``;\r\n    }\r\n    const { code } = compile(template, extend({\r\n        hoistStatic: true,\r\n        onError(err) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                const message = `Template compilation error: ${err.message}`;\r\n                const codeFrame = err.loc &&\r\n                    generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);\r\n                warn(codeFrame ? `${message}\\n${codeFrame}` : message);\r\n            }\r\n            else {\r\n                /* istanbul ignore next */\r\n                throw err;\r\n            }\r\n        }\r\n    }, options));\r\n    // The wildcard import results in a huge object with every export\r\n    // with keys that cannot be mangled, and can be quite heavy size-wise.\r\n    // In the global build we know `Vue` is available globally so we can avoid\r\n    // the wildcard object.\r\n    const render = ( new Function('Vue', code)(runtimeDom));\r\n    render._rc = true;\r\n    return (compileCache[key] = render);\r\n}\r\nregisterRuntimeCompiler(compileToFunction);\n\nexport { compileToFunction as compile };\n"],"sourceRoot":""}